# -*- coding: utf-8 -*-
"""Decision Tree Algorithm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lx75MdN5IoSQOSBmMmEGdJWSCzGyhEoX
"""

import pandas as pd # For reading csv file

datainput = pd.read_csv('/content/drug200.csv') #uploading the data
print(datainput)

# Pre-processing the data to get numeric values replacing text values

import numpy as np
import pandas as pd
from sklearn.metrics import confusion_matrix

X = datainput[['Age', 'Sex', 'BP', 'Cholesterol', 'Na_to_K']].values # identifiying the text values

from sklearn import preprocessing

label_gender = preprocessing.LabelEncoder() # converting the labels into a numeric form
label_gender.fit(['F', 'M']) # grabing the fitted data
X[:,1] = label_gender.transform(X[:,1]) #converting it into numerical value

label_BP = preprocessing.LabelEncoder()
label_BP.fit([ 'LOW', 'NORMAL', 'HIGH'])
X[:,2] = label_BP.transform(X[:,2])

label_Chol = preprocessing.LabelEncoder()
label_Chol.fit([ 'NORMAL', 'HIGH'])
X[:,3] = label_Chol.transform(X[:,3])

# Printing the first 6 records
print(X[0:6])

# Converting the Dependent variable into numerical values so that it can be used in the training as well as the evaluation data set.

X = datainput[['Age', 'Sex', 'BP', 'Cholesterol', 'Na_to_K']].values #the dependent values
y = datainput["Drug"] #targeted values

print(y[0:6])

#Training the dataset

from sklearn.model_selection import train_test_split # importing libraries for training

X = datainput[['Age', 'Sex', 'BP', 'Cholesterol', 'Na_to_K']].values

y = datainput["Drug"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=3) # reaing 30% of the data

print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)

# Getting the result

from sklearn.tree import DecisionTreeClassifier #for applying decision tree
from sklearn import metrics

drugTree = DecisionTreeClassifier(criterion="entropy", max_depth=4) # Creating a tree using inputs and a criteria called entropy, max_depth is the maximum depth of the tree

drugTree.fit(X_train, y_train) # using trained data
predicted = drugTree.predict(X_test) # predicting on the remaining 70% data

#The full Implementation

import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn import metrics

datainput = pd.read_csv("drug200.csv", delimiter=",")

X = datainput[['Age', 'Sex', 'BP', 'Cholesterol', 'Na_to_K']].values

# Data Preprocessing
from sklearn import preprocessing

label_gender = preprocessing.LabelEncoder()
label_gender.fit(['F', 'M'])
X[:, 1] = label_gender.transform(X[:, 1])

label_BP = preprocessing.LabelEncoder()
label_BP.fit(['LOW', 'NORMAL', 'HIGH'])
X[:, 2] = label_BP.transform(X[:, 2])

label_Chol = preprocessing.LabelEncoder()
label_Chol.fit(['NORMAL', 'HIGH'])
X[:, 3] = label_Chol.transform(X[:, 3])

y = datainput["Drug"]

# train_test_split
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=3)

drugTree = DecisionTreeClassifier(criterion="entropy", max_depth=4)

drugTree.fit(X_train, y_train)
predicted = drugTree.predict(X_test)

print(predicted)

print("DecisionTrees's Accuracy: ", metrics.accuracy_score(y_test, predicted))

metrics.accuracy_score(y_test, predicted)

predicted

